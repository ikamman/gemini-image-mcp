name: Build and Publish to npm

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            archive-name: gemini-image-mcp-linux-x64
          - os: macos-latest
            target: x86_64-apple-darwin
            archive-name: gemini-image-mcp-darwin-x64
          - os: windows-latest
            target: x86_64-pc-windows-gnu
            archive-name: gemini-image-mcp-win32-x64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}

      - name: Install cross compilation dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-mingw-w64

      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Create archive directory
        shell: bash
        run: mkdir -p target/archive

      - name: Copy binary to archive (Unix)
        if: matrix.os != 'windows-latest'
        run: cp target/${{ matrix.target }}/release/gemini-image-mcp target/archive/

      - name: Copy binary to archive (Windows)
        if: matrix.os == 'windows-latest'
        run: cp target/${{ matrix.target }}/release/gemini-image-mcp.exe target/archive/

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.archive-name }}
          path: target/archive/

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2

      - name: Run tests
        run: cargo test

  publish:
    name: Publish to npm
    needs: [build, test]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Organize binaries for npm package
        run: |
          # Create target directories
          mkdir -p target/release
          mkdir -p target/x86_64-unknown-linux-gnu/release
          mkdir -p target/x86_64-apple-darwin/release
          mkdir -p target/x86_64-pc-windows-gnu/release
          
          # Copy binaries to expected locations
          cp artifacts/gemini-image-mcp-linux-x64/gemini-image-mcp target/x86_64-unknown-linux-gnu/release/
          cp artifacts/gemini-image-mcp-darwin-x64/gemini-image-mcp target/x86_64-apple-darwin/release/
          cp artifacts/gemini-image-mcp-win32-x64/gemini-image-mcp.exe target/x86_64-pc-windows-gnu/release/
          
          # Copy one binary to the main release directory (for compatibility)
          cp artifacts/gemini-image-mcp-linux-x64/gemini-image-mcp target/release/

      - name: Update package version from git tag
        run: |
          # Extract version from git tag (remove 'v' prefix)
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "Setting package version to: $VERSION"
          npm version $VERSION --no-git-tag-version

      - name: Publish to npm
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  create-release:
    name: Create GitHub Release
    needs: [build, test]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create release archives
        run: |
          cd artifacts
          for dir in */; do
            if [ -d "$dir" ]; then
              cd "$dir"
              if ls *.exe 1> /dev/null 2>&1; then
                zip -r "../${dir%/}.zip" .
              else
                tar -czf "../${dir%/}.tar.gz" .
              fi
              cd ..
            fi
          done

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/*.zip
            artifacts/*.tar.gz
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}